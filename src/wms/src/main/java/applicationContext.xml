<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

<beans>
	<bean id="wmsLegacyLoader" class="org.geoserver.wms.WMSLoader"/>
    <bean id="wmsLoader" class="org.geoserver.wms.WMSXStreamLoader">
      <constructor-arg ref="resourceLoader"/>
    </bean>
    
    <!-- wms configuration bean. This is a service level facade to the configuration system -->
    <bean id="wms" class="org.geoserver.wms.WMS">
      <constructor-arg ref="geoServer"/>
    </bean>
    
	<!-- this registers the above modules with the servlet context
		 it is around to keep the struts app happy as we move away from 
		 servlets  -->
	<bean id="wmsRegisterar"
		class="org.vfny.geoserver.global.GeoServerServletContextInitializer">
		
		<constructor-arg type="java.lang.String" value="WMS"/>
 		<constructor-arg ref="wms"/>
 	</bean>
 	
 	<bean id="wmsFactoryExtension" class="org.geoserver.wms.WMSFactoryExtension"/>
 	
 	<!-- 
		operation beans for handling incoming requests 
	-->
	<bean id="wmsGetCapabilities" 
		class="org.geoserver.wms.GetCapabilities" >
      <description>WMS GetCapabilities operation</description>
      <constructor-arg ref="wms"/>
	</bean>

    <bean id="wmsGetStyles"
        class="org.geoserver.sld.GetStyles">
       <description>WMS GetStyles operation</description>
       <constructor-arg ref="wms"/>
    </bean>
    
	<bean id="wmsDescribeLayer"
		class="org.geoserver.wms.DescribeLayer">
       <description>WMS DescribeLayer operation</description>
	</bean>
		
	<bean id="wmsGetFeatureInfo"
		class="org.geoserver.wms.GetFeatureInfo">
      <constructor-arg ref="wms"/>
	</bean>
		
	<bean id="wmsGetLegendGraphic"
		class="org.geoserver.wms.GetLegendGraphic">
      <constructor-arg ref="wms"/>
	</bean>	
		
	<bean id="wmsGetMap" class="org.geoserver.wms.GetMap">
	    <constructor-arg ref="wms"/>
        <property name="filterFactory" ref="filterFactory">
          <description>Use the same filter factory declared in the WFS module</description>
        </property>
    </bean>
  
    <!-- GetFeatureInfo output formats -->
    <bean id="wmsGetFeatureInfoPlainText" class="org.geoserver.wms.featureinfo.TextFeatureInfoOutputFormat">
      <constructor-arg ref="wms" />
    </bean>
  
    <bean id="wmsGetFeatureInfoGML2" class="org.geoserver.wms.featureinfo.GML2FeatureInfoOutputFormat">
      <constructor-arg ref="wms" />
    </bean>
    
    <bean id="wmsGetFeatureInfoGML3" class="org.geoserver.wms.featureinfo.GML3FeatureInfoOutputFormat">
      <constructor-arg ref="wms" />
    </bean>
    
    <bean id="wmsGetFeatureInfoHTML" class="org.geoserver.wms.featureinfo.HTMLFeatureInfoOutputFormat">
      <constructor-arg ref="wms" />
    </bean>

	<!-- GetFeatureInfo JSONP -->
	<bean id="geoJSONPFeatureInfoResponse"
		class="org.geoserver.wms.featureinfo.GeoJSONFeatureInfoResponse">
		<constructor-arg ref="wms" />
		<constructor-arg value="text/javascript" />
	</bean>
	<!-- GetFeatureInfo JSONP filter -->
	<bean id="geoJSONPFeatureInfoResponseEF" class="org.geoserver.wfs.json.JSONPExtensionFilter">
		<constructor-arg value="geoJSONPFeatureInfoResponse" />
	</bean>
	<!-- GetFeatureInfo JSON -->
	<bean id="geoJSONFeatureInfoResponse"
		class="org.geoserver.wms.featureinfo.GeoJSONFeatureInfoResponse">
		<constructor-arg ref="wms" />
		<constructor-arg value="application/json" />
	</bean>
        
	<!-- wms service + descriptor -->
 	<bean id="wmsServiceTarget" class="org.geoserver.wms.DefaultWebMapService">
 	  <constructor-arg ref="wms"/>
      <property name="getCapabilities" ref="wmsGetCapabilities"/>
      <property name="describeLayer" ref="wmsDescribeLayer"/>
      <property name="getMap" ref="wmsGetMap"/>
      <property name="getFeatureInfo" ref="wmsGetFeatureInfo"/>
      <property name="getLegendGraphic" ref="wmsGetLegendGraphic"/>
      <property name="getStyles" ref="wmsGetStyles"/>
 	</bean>
 	
 	<bean id="wmsLogger" class="org.geoserver.ows.util.RequestObjectLogger">
      <constructor-arg type="java.lang.String" value="org.geoserver.wms"/>
    </bean>
    <bean id="wmsService2" class="org.springframework.aop.framework.ProxyFactoryBean">
      <property name="proxyInterfaces">
        <value>org.geoserver.wms.WebMapService</value>
      </property>
      <property name="targetName">
        <value>wmsServiceTarget</value>
      </property>
      <property name="interceptorNames">
        <list>
            <value>wmsLogger</value>
            <!-- allow any other advise defined elsewhere and named "wmsServiceInterceptor*" 
                 to be added to the interceptors list -->
            <value>wmsServiceInterceptor*</value>
        </list>
      </property>
    </bean>
    <alias name="wmsService2" alias="webMapService"/>

 	<bean id="wms-1_1_1-ServiceDescriptor" class="org.geoserver.platform.Service">
		<constructor-arg index="0" value="wms"/>
		<constructor-arg index="1" ref="wmsService2"/>
		<constructor-arg index="2" value="1.1.1"/>
	    <constructor-arg index="3">
          <list>
            <value>Capabilities</value>
            <value>GetCapabilities</value>
            <value>DescribeLayer</value>
            <value>GetFeatureInfo</value>
            <value>GetLegendGraphic</value>
            <value>GetMap</value>
            <value>Map</value>
            <value>reflect</value>
            <value>kml</value>
            <value>animate</value>
            <value>GetStyles</value>
          </list>
        </constructor-arg>
 	</bean>

 	<!-- service exception handler -->
	<bean id="wmsExceptionHandler" class="org.geoserver.wms.WMSServiceExceptionHandler">
		<constructor-arg>
		  <list>
		    <ref bean="wms-1_1_1-ServiceDescriptor"/>
		    <ref bean="wms-1_3_0-ServiceDescriptor"/>
		  </list>
		</constructor-arg>
		<constructor-arg ref="geoServer"/>
	</bean>
 	
    <bean id="wms-1_3_0-ServiceDescriptor" class="org.geoserver.platform.Service">
      <constructor-arg index="0" value="wms"/>
      <constructor-arg index="1" ref="wmsService2"/>
      <constructor-arg index="2" value="1.3.0"/>
        <constructor-arg index="3">
            <list>
              <value>GetCapabilities</value>
              <value>Capabilities</value>
              <value>GetMap</value>
              <value>Map</value>
              <value>DescribeLayer</value>
              <value>GetFeatureInfo</value>
              <value>GetLegendGraphic</value>
              <value>reflect</value>
              <value>kml</value>
              <value>animate</value>
            </list>
          </constructor-arg>
    </bean>

    <!-- kvp parsers -->
  
    <!-- 
    Can't use MapLayerInfoKvpParser due to the issue with the workspace qualifier callbacks in Dispatcher:
    the kvp parsers are run at Dispatcher.init(), before dispatching the request, when the KvpReaders all called. At that
    time the KvpParsers already ran and may end up with valid layers that should not be if the WMSWorkSpaceQualifier catched them before.
    
    <bean id="wmsLayersKvpParser" class="org.geoserver.wms.kvp.MapLayerInfoKvpParser">
      <description>
        Parses a comma separated list of layer names into a
        java.util.List of MapLayerInfo objects
      </description>
      <constructor-arg value="LAYERS" />
      <constructor-arg ref="wms" />
      <property name="service" value="WMS"/>
    </bean>

    <bean id="wmsFeatureInfo_QueryLayersKvpParser" class="org.geoserver.wms.kvp.MapLayerInfoKvpParser">
      <description>
        Parses a comma separated list of layer names into a
        java.util.List of MapLayerInfo objects
      </description>
      <constructor-arg value="QUERY_LAYERS" />
      <constructor-arg ref="wms" />
      <property name="service" value="WMS"/>
      <property name="request" value="GetFeatureInfo"/>
    </bean>
    -->
    
    <bean id="QuantizerMethodKvpParser" class="org.geoserver.ows.kvp.EnumKvpParser">
		<constructor-arg value="quantizer"/>
		<constructor-arg value="org.geoserver.wms.map.PNGMapResponse$QuantizeMethod"/>
 	</bean>
    
    <bean id="AnimatedGIFDelayKvpParser" class="org.geoserver.ows.kvp.IntegerKvpParser">
		<constructor-arg value="animatedGIFDelay"/>
 	</bean>
 	
 	<bean id="AnimatedGIFLoopContinuoslyKvpParser" class="org.geoserver.ows.kvp.BooleanKvpParser">
		<constructor-arg value="animatedGIFLoopContinuosly"/>
 	</bean>
 	
 	<bean id="widthKvpParser" class="org.geoserver.ows.kvp.IntegerKvpParser">
		<constructor-arg value="width"/>
 	</bean>
 	<bean id="heightKvpParser" class="org.geoserver.ows.kvp.IntegerKvpParser">
		<constructor-arg value="height"/>
 	</bean>
 	<bean id="wmsFormatOptionsKvpParser" class="org.geoserver.ows.kvp.FormatOptionsKvpParser"/>
 	<bean id="wmsEnviromentKvpParser" class="org.geoserver.ows.kvp.FormatOptionsKvpParser">
 		<constructor-arg index="0" value="env"/>
 	</bean>
 	<bean id="wmsLegendOptionsKvpParser" class="org.geoserver.ows.kvp.FormatOptionsKvpParser">
 		<constructor-arg index="0" value="legend_options"/>
 	</bean>
  <bean id="wmsSqlViewKvpParser" class="org.geoserver.ows.kvp.ViewParamsKvpParser">
    <!-- cannot set the service or it won't work for the reflectors -->
  </bean>
 	<bean id="bgColorKvpParser" class="org.geoserver.wms.kvp.ColorKvpParser">
		<constructor-arg value="bgcolor"/>
 	</bean> 	
 	<bean id="transparentKvpParser" class="org.geoserver.ows.kvp.BooleanKvpParser">
 		<constructor-arg value="transparent"/>
 	</bean>
 	<bean id="tiledKvpParser" class="org.geoserver.ows.kvp.BooleanKvpParser">
 		<constructor-arg value="tiled"/>
 	</bean> 	
 	<bean id="tilesOriginKvpParser" class="org.geoserver.wms.kvp.TilesOriginKvpParser"/>
 	<bean id="bufferKvpParser" class="org.geoserver.ows.kvp.IntegerKvpParser">
 		<constructor-arg value="buffer"/>
 	</bean>
 	<bean id="paletteKvpParser" class="org.geoserver.wms.kvp.PaletteKvpParser"/>
  <bean id="timeKvpParser" class="org.geoserver.ows.kvp.TimeKvpParser">
      <constructor-arg value="time"/>
  </bean>
 	<bean id="elevationKvpParser" class="org.geoserver.ows.kvp.ElevationKvpParser">
		<constructor-arg value="elevation"/>
 	</bean>
 	<bean id="validateSldKvpParser" class="org.geoserver.ows.kvp.BooleanKvpParser">
 		<constructor-arg value="validateschema"/>
 	</bean>
    <bean id="sldKvpParser" class="org.geoserver.ows.kvp.URLKvpParser">
        <constructor-arg value="sld"/>
    </bean>
 	<bean id="startIndexKvpParser" class="org.geoserver.ows.kvp.IntegerKvpParser">
 	    <constructor-arg value="startIndex"/>
 	</bean>
 	<bean id="angleKvpParser" class="org.geoserver.ows.kvp.DoubleKvpParser">
		<constructor-arg value="angle"/>
 	</bean>
 	<bean id="stylesKvpParser" class="org.geoserver.ows.FlatKvpParser">
		<constructor-arg index="0" value="layers"/>
		<constructor-arg index="1" value="java.lang.String"/>
		<property name="request" value="GetStyles"/>
		<property name="service" value="WMS"/>
 	</bean>
    <bean id="dpiKvpParser" class="org.geoserver.ows.kvp.IntegerKvpParser">
        <constructor-arg value="dpi"/>
    </bean>
     <bean id="propertyNameWMSKvpParser" class="org.geoserver.ows.NestedKvpParser">
        <constructor-arg index="0" value="propertyName"/>
        <constructor-arg index="1" value="java.lang.String"/>
        <property name="service" value="WMS"/>
    </bean>
 	
 	<!-- kvp request readers -->
 	<bean id="wmsGetCapabilitiesKvpReader" 
 		class="org.geoserver.wms.capabilities.CapabilitiesKvpReader">
      <constructor-arg ref="wms"/>
	</bean>

	<bean id="describeLayerKvpReader"
		class="org.geoserver.wms.describelayer.DescribeLayerKvpRequestReader">
      	<constructor-arg ref="wms" />
	</bean>
	
	<bean id="getMapKvpReader"
		class="org.geoserver.wms.map.GetMapKvpRequestReader">
        <constructor-arg ref="wms"/>
	</bean>
	<bean id="getFeatureInfoKvpReader"
			class="org.geoserver.wms.featureinfo.GetFeatureInfoKvpReader">
      	<constructor-arg ref="wms" />
	</bean>
	<bean id="getLegendGraphicKvpReader"
			class="org.geoserver.wms.legendgraphic.GetLegendGraphicKvpReader">
      	<constructor-arg ref="wms" />
	</bean>
  <!-- 
	<bean id="putStylesKvpReader"
		class="org.geoserver.wms.kvp.WMSKvpRequestReaderAdapter">
		<constructor-arg index="0" value="org.vfny.geoserver.sld.requests.PutStylesRequest" />
      	<constructor-arg index="1" value="org.vfny.geoserver.sld.requests.PutStylesKvpReader" />
      	<constructor-arg index="2" ref="wms" />
	</bean>
   -->
	
	<bean id="getStylesKvpReader" class="org.geoserver.sld.GetStylesKvpRequestReader">
		<constructor-arg ref="wms"/> 
	</bean>
		
	<!-- xml request readers -->
    <bean id="wmsCapabilitiesXmlReader" 
    	class="org.geoserver.wms.capabilities.CapabilitiesXmlReader">
    </bean>
    
     <bean id="getMapXmlReader" 
    	class="org.geoserver.wms.map.GetMapXmlReader">
    	<constructor-arg ref="wms"/>
    </bean>
   	<bean id="sldXmlReader"
   		class="org.geoserver.sld.SLDXmlRequestReader">
      <constructor-arg ref="wms"/>
    </bean>
   		
	<!--  responses -->
	<bean id="wms_1_1_1_GetCapabilitiesResponse"
		class="org.geoserver.wms.capabilities.GetCapabilitiesResponse">
      <constructor-arg ref="wms"/>
	</bean>
    <bean id="wms_1_3_0_GetCapabilitiesResponse"
      class="org.geoserver.wms.capabilities.Capabilities_1_3_0_Response">
    </bean>
    
    <!-- DescribeLayer output formats -->
    <bean id="wmsDescribeLayerXML" class="org.geoserver.wms.describelayer.XMLDescribeLayerResponse">
      <constructor-arg ref="wms" />
      <constructor-arg value="text/xml" />
    </bean>
    
    <!-- DescribeLayer output formats -->
    <bean id="wmsDescribeLayerResponse" class="org.geoserver.wms.describelayer.XMLDescribeLayerResponse">
      <constructor-arg ref="wms" />
    </bean>

	<!-- DescribeLayer JSONP -->
	<bean id="jsonPDescribeLayerResponse"
		class="org.geoserver.wms.describelayer.JSONDescribeLayerResponse">
		<constructor-arg ref="wms" />
		<constructor-arg value="text/javascript" />
	</bean>
	<!-- DescribeLayer JSONP Filter -->
	<bean id="jsonPDescribeLayerResponseEF" class="org.geoserver.wfs.json.JSONPExtensionFilter">
		<constructor-arg value="jsonPDescribeLayerResponse" />
	</bean>
	<!-- DescribeLayer JSON -->
	<bean id="jsonDescribeLayerResponse"
		class="org.geoserver.wms.describelayer.JSONDescribeLayerResponse">
		<constructor-arg ref="wms" />
		<constructor-arg value="application/json" />
	</bean>
    
	<!--bean id="getMapResponse"
		class="org.geoserver.wms.response.GetMapResponse">
		<constructor-arg ref="wms"/>
	</bean-->
	<bean id="getFeatureInfoResponse"
		class="org.geoserver.wms.featureinfo.GetFeatureInfoResponse">
		<constructor-arg ref="wms"/>
        <constructor-arg ref="wmsGetFeatureInfoPlainText"/> <!-- default output format -->
	</bean>
	
	<bean id="stylesResponse" class="org.geoserver.sld.GetStylesResponse"/>
	
	<!-- Wrapping the PutStyles servlet in a controller while we wait to rewrite it for good -->
    <!-- GR: commenting out, putStyles is not being used nor maintained? -->
	<!-- bean id="putStylesWrapper" class="org.springframework.web.servlet.mvc.ServletWrappingController">
	   <property name="servletClass">
	     <value>org.vfny.geoserver.sld.servlets.PutStyles</value>
	   </property>
	   <property name="servletName">
	     <value>putstyles</value>
       </property>
	</bean-->
	
	<!-- http url mapping -->
	<bean id="wmsURLMapping" 
		class="org.geoserver.ows.OWSHandlerMapping">
		<constructor-arg ref="catalog"/>
		<property name="alwaysUseFullPath" value="true"/>
		<property name="mappings">
			<props>
				<prop key="/wms">dispatcher</prop>
				<!-- prop key="/wms/putstyles">putStylesWrapper</prop-->
				<prop key="/wms/*">dispatcher</prop>
			</props>
		</property>
	</bean>
	<!--  
		GetLegendGraphic output formats
	 -->
	<bean id="wmsGIFLegendOutputFormat" 
		class="org.geoserver.wms.legendgraphic.GIFLegendOutputFormat">
	</bean>
    <bean id="wmsGIFLegendGraphicResponse" 
        class="org.geoserver.wms.legendgraphic.GIFLegendGraphicResponse">
    </bean>
	<bean id="wmsJPEGLegendGraphicOutputFormat" 
        class="org.geoserver.wms.legendgraphic.JPEGLegendOutputFormat">
	</bean>
    <bean id="wmsJPEGLegendGraphicResponse" 
        class="org.geoserver.wms.legendgraphic.JPEGLegendGraphicResponse">
    </bean>
	<bean id="wmsPNGLegendOutputFormat" 
		class="org.geoserver.wms.legendgraphic.PNGLegendOutputFormat">
	</bean>
    <bean id="wmsPNGLegendGraphicResponse" 
        class="org.geoserver.wms.legendgraphic.PNGLegendGraphicResponse">
    </bean>
	
	<!--  
		Map producers and responses
	 -->
    <bean id="wmsXMLTransformerResponse" class="org.geoserver.wms.map.XMLTransformerMapResponse">
      <description>Handles responsed from GetMapOutputFormats that produce
        an org.geoserver.wms.map.XMLTransformerMap, such as the KML and GeoRSS ones
        </description>
    </bean>

    <bean id="PNGMapProducer" class="org.geoserver.wms.map.RenderedImageMapOutputFormat">
      <constructor-arg>
        <description>The prescribed output format MIME-Type</description>
        <value>image/png</value>
      </constructor-arg>
      <constructor-arg>
        <description>The declared output format MIME-Types in the capabilities document</description>
        <list>
          <value>image/png</value>
        </list>
      </constructor-arg>
      <constructor-arg ref="wms" />
      <property name="extension" value="png"/>
    </bean>
    <bean id="PNG8MapProducer" class="org.geoserver.wms.map.RenderedImageMapOutputFormat">
      <constructor-arg>
        <description>The prescribed output format MIME-Type</description>
        <value>image/png; mode=8bit</value>
      </constructor-arg>
      <constructor-arg>
        <description>The declared output format MIME-Types in the capabilities document</description>
        <list>
          <value>image/png8</value>
          <value>image/png; mode=8bit</value>
        </list>
      </constructor-arg>
      <constructor-arg ref="wms" />
      <property name="extension" value="png"/>
    </bean>
    
    <bean id="PNGMapResponse" class="org.geoserver.wms.map.PNGMapResponse">
      <constructor-arg ref="wms" />
    </bean>
    
    <bean id="GeoTiffMapProducer" class="org.geoserver.wms.map.RenderedImageMapOutputFormat">
      <constructor-arg>
        <description>The prescribed output format MIME-Type</description>
        <value>image/geotiff</value>
      </constructor-arg>
      <constructor-arg>
        <description>The declared output format MIME-Types in the capabilities document</description>
        <list>
          <value>image/geotiff</value>
        </list>
      </constructor-arg>
      <property name="extension" value="tif"/>
      <constructor-arg ref="wms" />
    </bean>
    <bean id="GeoTiffMapProducer8" class="org.geoserver.wms.map.RenderedImageMapOutputFormat">
      <constructor-arg>
        <description>The prescribed output format MIME-Type</description>
        <value>image/geotiff8</value>
      </constructor-arg>
      <constructor-arg>
        <description>The declared output format MIME-Types in the capabilities document</description>
        <list>
          <value>image/geotiff8</value>
        </list>
      </constructor-arg>
      <constructor-arg ref="wms" />
      <property name="extension" value="tif"/>
    </bean>
    <bean id="GeoTiffMapResponse" class="org.geoserver.wms.map.GeoTIFFMapResponse">
      <constructor-arg ref="wms" />
    </bean>

    <bean id="TiffMapProducer" class="org.geoserver.wms.map.RenderedImageMapOutputFormat">
      <constructor-arg>
        <description>The prescribed output format MIME-Type</description>
        <value>image/tiff</value>
      </constructor-arg>
      <constructor-arg>
        <description>The declared output format MIME-Types in the capabilities document</description>
        <list>
          <value>image/tiff</value>
        </list>
      </constructor-arg>
      <constructor-arg ref="wms" />
      <property name="extension" value="tif"/>
    </bean>
    <bean id="Tiff8MapProducer" class="org.geoserver.wms.map.RenderedImageMapOutputFormat">
      <constructor-arg>
        <description>The prescribed output format MIME-Type</description>
        <value>image/tiff8</value>
      </constructor-arg>
      <constructor-arg>
        <description>The declared output format MIME-Types in the capabilities document</description>
        <list>
          <value>image/tiff8</value>
        </list>
      </constructor-arg>
      <constructor-arg ref="wms" />
      <property name="extension" value="tif"/>
    </bean>
    <bean id="TiffMapResponse" class="org.geoserver.wms.map.TIFFMapResponse">
      <constructor-arg ref="wms" />
    </bean>
  
    <bean id="GIFMapProducer" class="org.geoserver.wms.map.RenderedImageMapOutputFormat">
      <constructor-arg>
        <description>The prescribed output format MIME-Type, same as declared in the getcaps document</description>
        <value>image/gif</value>
      </constructor-arg>
      <constructor-arg>
        <description>The declared output format MIME-Types in the capabilities document</description>
        <list>
          <value>image/gif</value>
          <value>image/gif;subtype=animated</value>
        </list>
      </constructor-arg>
      <constructor-arg ref="wms" />
      <property name="extension" value="gif"/>
    </bean>
    <bean id="GIFMapResponse" class="org.geoserver.wms.map.GIFMapResponse">
      <constructor-arg ref="wms" />
    </bean>
  
    <bean id="JPEGMapProducer" class="org.geoserver.wms.map.RenderedImageMapOutputFormat">
      <constructor-arg>
        <description>The prescribed output format MIME-Type, same as declared in the getcaps document</description>
        <value>image/jpeg</value>
      </constructor-arg>
      <constructor-arg ref="wms" />
      <property name="transparencySupported">
        <description>JPEG does not support transparency</description>
        <value>false</value>
      </property>
      <property name="paletteSupported">
        <description>JPEG does not support 8-bit indexed color maps</description>
        <value>false</value>
      </property>
      <property name="extension" value="jpg"/>
    </bean>
    <bean id="JPEGMapResponse" class="org.geoserver.wms.map.JPEGMapResponse">
      <constructor-arg ref="wms" />
    </bean>

    <bean id="PDFMapProducer" class="org.geoserver.wms.map.PDFMapOutputFormat">
    </bean>
    <bean id="PDFMapResponse" class="org.geoserver.wms.map.PDFMapResponse">
      <constructor-arg ref="wms" />
    </bean>

	<bean id="KMLMapProducer" 
		class="org.geoserver.kml.KMLMapOutputFormat">
      <constructor-arg index="0" ref="wms"/>
	</bean>

    <bean id="KMZMapProducer" class="org.geoserver.kml.KMZMapOutputFormat">
      <constructor-arg ref="wms" />
    </bean>
    <bean id="KMZMapResponse" class="org.geoserver.kml.KMZMapResponse">
      <constructor-arg ref="wms" />
    </bean>
    <bean id="NetworkLinkMapProducer" class="org.geoserver.kml.NetworkLinkMapOutputFormat">
      <constructor-arg ref="wms" />
    </bean>

    <bean id="OpenLayersMapProducer" class="org.geoserver.wms.map.OpenLayersMapOutputFormat">
      <constructor-arg index="0" ref="wms" />
    </bean>
    <bean id="OpenLayersMapResponse" class="org.geoserver.wms.map.RawMapResponse">
    </bean>
    

	<bean id="AtomGeoRSSMapProducer"
		singleton="true"
		class="org.geoserver.wms.georss.AtomGeoRSSMapOutputFormat">
        <constructor-arg index="0" ref="wms"/>
	</bean>

	<bean id="RSSGeoRSSMapProducer"
		singleton="true"
		class="org.geoserver.wms.georss.RSSGeoRSSMapOutputFormat">
        <constructor-arg index="0" ref="wms"/>
	</bean>

    <bean id="SVGBatikMapOutputFormat" class="org.geoserver.wms.svg.SVGBatikMapOutputFormat">
      <constructor-arg ref="wms" />
    </bean>
    <bean id="SVGBatikMapResponse" class="org.geoserver.wms.svg.SVGBatikMapResponse">
      <description>OWS Response handler for the maps produced by SVGBatikMapOutputFormat</description>
    </bean>

    <bean id="SVGStreamingMapOutputFormat" class="org.geoserver.wms.svg.SVGStreamingMapOutputFormat">
    </bean>
    <bean id="SVGStreamingMapResponse" class="org.geoserver.wms.svg.SVGStreamingMapResponse">
    </bean>

  <bean id="wmsSVGStrategyExclusionFilter" class="org.geoserver.wms.svg.SVGStrategyExclusionFilter">
    <description>Excludes the SVG map producer that's to be disabled based on the WMS preferences</description>
    <constructor-arg>
      <description>Name (not reference) of the WMS bean, so it's lazily loaded from the app context to avoid circular
        rerefencies (that happen only due to the mock tests set up)</description>
      <value>wms</value>
    </constructor-arg>
  </bean>
 	
	<!-- http url mapping -->
	<bean id="kmlURLMapping" 
		class="org.geoserver.ows.OWSHandlerMapping">
		<constructor-arg ref="catalog"/>
		<property name="alwaysUseFullPath" value="true"/>
		<property name="mappings">
			<props>
				<prop key="/kml">dispatcher</prop>
				<prop key="/kml/*">dispatcher</prop>
			</props>
		</property>
	</bean>
	
	<bean id="animateURLMapping" 
		class="org.geoserver.ows.OWSHandlerMapping">
		<constructor-arg ref="catalog"/>
		<property name="alwaysUseFullPath" value="true"/>
		<property name="mappings">
			<props>
				<prop key="/animate">dispatcher</prop>
				<prop key="/animate/*">dispatcher</prop>
			</props>
		</property>
	</bean>
	
	<!-- kml kvp parsers -->
 	<bean id="superOverlayKvpParser" class="org.geoserver.ows.kvp.BooleanKvpParser">
		<constructor-arg value="superoverlay"/>
 	</bean>
 	<bean id="legendKvpParser" class="org.geoserver.ows.kvp.BooleanKvpParser">
		<constructor-arg value="legend"/>
 	</bean>
 	<bean id="kmatrrKvpParser" class="org.geoserver.ows.kvp.BooleanKvpParser">
		<constructor-arg value="kmattr"/>
 	</bean>
 	<bean id="kmscoreKvpParser" class="org.geoserver.ows.kvp.IntegerKvpParser">
		<constructor-arg value="kmscore"/>
 	</bean>
 	<bean id="kmplacemarkKvpParser" class="org.geoserver.ows.kvp.BooleanKvpParser">
		<constructor-arg value="kmplacemark"/>
 	</bean>
  
    <!-- the meta tile cache, registered here because it's also a WFS transaction listener -->
    <bean id="metaTileCache" class="org.geoserver.wms.map.QuickTileCache">
      <constructor-arg ref="geoServer"/>
    </bean>

    <bean id="nativeSortingRegionator"
        class="org.geoserver.kml.ReflectiveRegionatingStrategyFactory">
      <constructor-arg value="native-sorting"/>
      <constructor-arg value="org.geoserver.kml.NativeSortRegionatingStrategy"/>
      <constructor-arg ref="geoServer"/>
    </bean>
    <bean id="externalSortingRegionator"
        class="org.geoserver.kml.ReflectiveRegionatingStrategyFactory">
      <constructor-arg value="external-sorting"/>
      <constructor-arg value="org.geoserver.kml.ExternalSortRegionatingStrategy"/>
      <constructor-arg ref="geoServer"/>
    </bean>
    <bean id="geometryRegionator"
        class="org.geoserver.kml.ReflectiveRegionatingStrategyFactory">
      <constructor-arg value="geometry"/>
      <constructor-arg value="org.geoserver.kml.GeometryRegionatingStrategy"/>
      <constructor-arg ref="geoServer"/>
    </bean>
    <bean id="randomRegionator"
        class="org.geoserver.kml.ReflectiveRegionatingStrategyFactory">
      <constructor-arg value="random"/>
      <constructor-arg value="org.geoserver.kml.RandomRegionatingStrategy"/>
      <constructor-arg ref="geoServer"/>
    </bean>
    <bean id="bestGuessRegionator"
        class="org.geoserver.kml.ReflectiveRegionatingStrategyFactory">
      <constructor-arg value="best_guess"/>
      <constructor-arg value="org.geoserver.kml.BestGuessRegionatingStrategy"/>
      <constructor-arg ref="geoServer"/>
    </bean>

    <!-- Default Decoration Plugins -->
    <bean id="image" 
          class="org.geoserver.wms.decoration.WatermarkDecoration"
          singleton="false"
     />

    <bean id="legend" 
          class="org.geoserver.wms.decoration.LegendDecoration"
          singleton="false">
       <constructor-arg ref="wms"/>
    </bean>

    <bean id="scaleratio" 
          class="org.geoserver.wms.decoration.ScaleRatioDecoration"
          singleton="false"
    />
    
    <bean id="scaleline" 
          class="org.geoserver.wms.decoration.ScaleLineDecoration"
          singleton="false"
    />
    
    <bean id="text" 
          class="org.geoserver.wms.decoration.TextDecoration"
          singleton="false"
    />
    
    <bean id="wmsWorkspaceQualifier" class="org.geoserver.wms.WMSWorkspaceQualifier">
      <constructor-arg ref="catalog"/>
    </bean>
    
    <bean id="wmsLocalWorkspaceURLManger" class="org.geoserver.ows.LocalWorkspaceURLMangler">
      <constructor-arg value="wms"/>
    </bean>
    
    <bean id="wmsLifecycleHandler" class="org.geoserver.wms.WMSLifecycleHandler">
      <constructor-arg index="0" ref="dataDirectory"/>
      <constructor-arg index="1" ref="wms"/>
    </bean>
      
    <bean id="wmsCatalogValidator" class="org.geoserver.wms.WMSValidator"/>
    
    <bean id="rasterCleaner" class="org.geoserver.wms.RasterCleaner"/>
    
    <bean id="wmsClasspathPublisherMapping"
    class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
     <property name="alwaysUseFullPath" value="true"/>
     <property name="mappings">
       <props>
        <prop key="/openlayers/**">classpathPublisher</prop>
        <prop key="/options.png">classpathPublisher</prop>
       </props>
     </property>
  </bean>
</beans>
